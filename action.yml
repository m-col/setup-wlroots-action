name: "Set up wayland and wlroots libraries"
description: "Sets up the wayland and wlroots libraries for github workflows"

inputs:
  wayland-version:
    description: "Wayland library version to set up"
    required: false
    default: "main"
  wayland-protocols-version:
    description: "Wayland protocols version to set up"
    required: false
    default: "main"
  libdrm-version:
    description: "libdrm version to set up"
    required: false
    default: "main"
  seatd-version:
    description: "seatd version to set up"
    required: false
    default: "master"
  pixman-version:
    description: "pixman version to set up"
    required: false
    default: "master"
  hwdata-version:
    description: "hwdata version to set up"
    required: false
    default: "master"
  wlroots-version:
    description: "wlroots version to set up"
    required: false
    default: "master"

runs:
  using: "composite"
  steps:
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash
    - name: Install packaged Ubuntu dependencies
      run: ./setup-ubuntu.sh
      shell: bash
    - name: Munge inputs into URL/folder paths
      shell: bash
      run: |
        echo WAYLAND_PATH=${{ inputs.wayland-version }} >> $GITHUB_ENV
        echo WAYLAND_PROTOCOLS_PATH=${{ inputs.wayland-protocols-version }} >> $GITHUB_ENV
        if [[ "${{ inputs.libdrm-version }}" == "main" ]]; then
          echo LIBDRM_PATH=${{ inputs.libdrm-version }} >> $GITHUB_ENV
        else
          echo LIBDRM_PATH=libdrm-${{ inputs.libdrm-version }} >> $GITHUB_ENV
        fi
        echo SEATD_PATH=${{ inputs.seatd-version }} >> $GITHUB_ENV
        if [[ "${{ inputs.pixman-version }}" == "master" ]]; then
          echo PIXMAN_PATH=${{ inputs.pixman-version }} >> $GITHUB_ENV
        else
          echo PIXMAN_PATH=pixman-${{ inputs.pixman-version }} >> $GITHUB_ENV
        fi
        if [[ "${{ inputs.hwdata-version }}" == "master" ]]; then
          echo HWDATA_PATH=heads/${{ inputs.hwdata-version }} >> $GITHUB_ENV
        else
          echo HWDATA_PATH=tags/v${{ inputs.hwdata-version }} >> $GITHUB_ENV
        fi
        echo WLROOTS_PATH=${{ inputs.wlroots-version }} >> $GITHUB_ENV
    - name: Download and unpack source archives
      shell: bash
      env:
        WAYLAND_URL: https://gitlab.freedesktop.org/wayland/wayland/-/archive/${{ env.WAYLAND_PATH }}/wayland-${{ env.WAYLAND_PATH }}.tar.gz
        WAYLAND_PROTOCOLS_URL: https://gitlab.freedesktop.org/wayland/wayland-protocols/-/archive/${{ env.WAYLAND_PROTOCOLS_PATH }}/wayland-protocols-${{ env.WAYLAND_PROTOCOLS_PATH }}.tar.gz
        LIBDRM_URL: https://gitlab.freedesktop.org/mesa/drm/-/archive/${{ env.LIBDRM_PATH }}/drm-${{ env.LIBDRM_PATH }}.tar.gz
        SEATD_URL: https://git.sr.ht/~kennylevinsen/seatd/archive/${{ env.SEATD_PATH }}.tar.gz
        PIXMAN_URL: https://gitlab.freedesktop.org/pixman/pixman/-/archive/${{ env.PIXMAN_PATH }}/pixman-${{ env.PIXMAN_PATH }}.tar.gz
        HWDATA_URL: https://github.com/vcrhonek/hwdata/archive/refs/${{ env.HWDATA_PATH }}.zip
        WLROOTS_URL: https://gitlab.freedesktop.org/wlroots/wlroots/-/archive/${{ env.WLROOTS_PATH }}/wlroots-${{ env.WLROOTS_PATH }}.tar.gz
      run: |
        wget -O wayland.tar.gz $WAYLAND_URL
        wget -O wayland-protocols.tar.gz $WAYLAND_PROTOCOLS_URL
        wget -O drm.tar.gz $LIBDRM_URL
        wget -O seatd.tar.gz $SEATD_URL
        wget -O pixman.tar.gz $PIXMAN_URL
        wget -O hwdata.zip $HWDATA_URL
        wget -O wlroots.tar.gz $WLROOTS_URL
        tar -xf wayland.tar.gz
        tar -xf wayland-protocols.tar.gz
        tar -xf drm.tar.gz
        tar -xf seatd.tar.gz
        tar -xf pixman.tar.gz
        unzip hwdata.zip
        tar -xf wlroots.tar.gz
    - name: Build wayland
      working-directory: wayland-${{ inputs.wayland-version }}
      shell: bash
      run: |
        meson build --prefix=/usr -Ddocumentation=false
        ninja -C build
        sudo ninja -C build install
    - name: Build wayland-protocols
      working-directory: wayland-protocols-${{ inputs.wayland-protocols-version }}
      shell: bash
      run: |
        meson build --prefix=/usr -Dtests=false
        ninja -C build
        sudo ninja -C build install
    - name: Build libdrm
      working-directory: drm-${{ env.LIBDRM_PATH }}
      shell: bash
      run: |
        meson build --prefix=/usr
        ninja -C build
        sudo ninja -C build install
    - name: Build seatd
      working-directory: seatd-${{ inputs.seatd-version }}
      shell: bash
      run: |
        meson build --prefix=/usr
        ninja -C build
        sudo ninja -C build install
    - name: Build pixman
      working-directory: pixman-${{ env.PIXMAN_PATH }}
      shell: bash
      run: |
        meson build --prefix=/usr
        ninja -C build
        sudo ninja -C build install
    - name: Build hwdata
      working-directory: hwdata-${{ inputs.hwdata-version }}
      shell: bash
      run: |
        ./configure --prefix=/usr --libdir=/lib --datadir=/usr/share
        make
        sudo make install
    - name: Build wlroots
      working-directory: wlroots-${{ inputs.wlroots-version }}
      continue-on-error: ${{ inputs.wlroots-version == 'master' }}
      shell: bash
      run: |
        meson build --prefix=/usr -Dxwayland=enabled -Dexamples=false
        ninja -C build
        sudo ninja -C build install
